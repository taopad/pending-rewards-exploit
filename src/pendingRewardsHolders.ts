import { createPublicClient, http, formatUnits } from "viem"
import { mainnet } from "viem/chains"
import Taopad from "../abi/Taopad"

// collect all non zero pending rewards before the exploit.
// list only people still holding taopad.

const fs = require('fs');

const rpcUrl = "https://eth-mainnet.g.alchemy.com/v2/I_wAoUHydGV1XVMlEFUww-mrts53NWVa"

const holdersFile = "./data/holders.txt"

const address = "0x5483DC6abDA5F094865120B2D251b5744fc2ECB5"

const blockNumber = 18999071n // last block where pending rewards has accurate values
const currentBlockNumber = 19013391n // current block when the script was written

const publicClient = createPublicClient({
    chain: mainnet,
    transport: http(rpcUrl)
})

const main = async () => {
    let totalPendingRewards = 0n

    const holders = fs.readFileSync(holdersFile, 'utf-8').split("\n");

    console.log(["address", "pendingRewards", "formatted"].join("\t"))

    for (let i = 0; i < holders.length; i++) {
        if (holders[i].trim() != "") {
            const holder: `0x${string}` = holders[i]

            const balanceOf = await publicClient.readContract({
                address,
                abi: Taopad,
                functionName: "balanceOf",
                args: [holder],
                blockNumber: currentBlockNumber,
            })

            if (balanceOf > 0n) {
                const pendingRewards = await publicClient.readContract({
                    address,
                    abi: Taopad,
                    functionName: "pendingRewards",
                    args: [holder],
                    blockNumber,
                })

                if (pendingRewards > 0n) {
                    totalPendingRewards += pendingRewards

                    console.log([holder, pendingRewards, formatUnits(pendingRewards, 9)].join("\t"))
                }
            }
        }
    }

    console.log(["total", totalPendingRewards, formatUnits(totalPendingRewards, 9)].join("\t"))
}

main()
